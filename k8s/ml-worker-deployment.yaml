apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-worker-deployment
  namespace: ai-trading-platform
  labels:
    app: ml-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ml-worker
  template:
    metadata:
      labels:
        app: ml-worker
    spec:
      containers:
      - name: ml-worker
        image: ai-trading-platform/ml-worker:latest
        env:
        - name: DATABASE_URL
          value: "postgresql://trading_user:$(POSTGRES_PASSWORD)@postgres-service:5432/trading_platform"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379/0"
        - name: RAY_DISABLE_IMPORT_WARNING
          value: "1"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-platform-secrets
              key: postgres-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-platform-secrets
              key: redis-password
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: model-storage
          mountPath: /app/checkpoints
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import torch; print('ML worker healthy')"
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - python
            - -c
            - "from src.ml.worker import MLWorker; print('ML worker ready')"
          initialDelaySeconds: 30
          periodSeconds: 15
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            nvidia.com/gpu: 1  # Request GPU if available
      volumes:
      - name: config-volume
        configMap:
          name: trading-platform-config
      - name: model-storage
        persistentVolumeClaim:
          claimName: model-storage-pvc
      nodeSelector:
        workload-type: ml  # Schedule on ML-optimized nodes
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: ml-worker-service
  namespace: ai-trading-platform
spec:
  selector:
    app: ml-worker
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-storage-pvc
  namespace: ai-trading-platform
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ml-worker-hpa
  namespace: ai-trading-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ml-worker-deployment
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600  # Longer stabilization for ML workloads
      policies:
      - type: Percent
        value: 25
        periodSeconds: 120
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60