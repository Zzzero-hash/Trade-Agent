"""
Trading signal models with Pydantic validation.
"""
from datetime import datetime, timezone
from typing import Optional
from pydantic import BaseModel, Field, field_validator, model_validator, ConfigDict
from enum import Enum


class TradingAction(str, Enum):
    """Trading action types."""
    BUY = "BUY"
    SELL = "SELL"
    HOLD = "HOLD"


class TradingSignal(BaseModel):
    """
    Trading signal model with comprehensive validation.
    
    Represents a trading recommendation generated by ML models.
    """
    symbol: str = Field(..., min_length=1, max_length=20, description="Trading symbol")
    action: TradingAction = Field(..., description="Recommended trading action")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Signal confidence score")
    position_size: float = Field(..., ge=0.0, le=1.0, description="Recommended position size as fraction of portfolio")
    target_price: Optional[float] = Field(None, gt=0, description="Target price for the trade")
    stop_loss: Optional[float] = Field(None, gt=0, description="Stop loss price")
    timestamp: datetime = Field(..., description="Signal generation timestamp")
    model_version: str = Field(..., min_length=1, description="Model version that generated the signal")
    
    @field_validator('symbol')
    @classmethod
    def validate_symbol(cls, v):
        """Validate trading symbol format."""
        if not v or not v.strip():
            raise ValueError("Symbol cannot be empty")
        return v.strip().upper()
    
    @field_validator('confidence')
    @classmethod
    def validate_confidence(cls, v):
        """Validate confidence is between 0 and 1."""
        if not 0.0 <= v <= 1.0:
            raise ValueError("Confidence must be between 0.0 and 1.0")
        return v
    
    @field_validator('position_size')
    @classmethod
    def validate_position_size(cls, v):
        """Validate position size is between 0 and 1."""
        if not 0.0 <= v <= 1.0:
            raise ValueError("Position size must be between 0.0 and 1.0")
        return v
    
    @field_validator('model_version')
    @classmethod
    def validate_model_version(cls, v):
        """Validate model version format."""
        if not v or not v.strip():
            raise ValueError("Model version cannot be empty")
        return v.strip()
    
    @field_validator('timestamp')
    @classmethod
    def validate_timestamp(cls, v):
        """Validate timestamp is not too far in the future."""
        # Allow small future timestamps for processing delays
        now = datetime.now(timezone.utc)
        if v.tzinfo is None:
            # Assume naive datetime is UTC
            v = v.replace(tzinfo=timezone.utc)
        max_future = now.timestamp() + 300  # 5 minutes
        if v.timestamp() > max_future:
            raise ValueError("Timestamp cannot be more than 5 minutes in the future")
        return v
    
    @model_validator(mode='after')
    def validate_stop_loss(self):
        """Validate stop loss relative to target price and action."""
        if self.stop_loss is None or self.target_price is None:
            return self
        
        if self.action == TradingAction.BUY and self.stop_loss >= self.target_price:
            raise ValueError("Stop loss must be below target price for BUY signals")
        elif self.action == TradingAction.SELL and self.stop_loss <= self.target_price:
            raise ValueError("Stop loss must be above target price for SELL signals")
        
        return self
    
    def is_actionable(self) -> bool:
        """Check if signal is actionable based on confidence and action."""
        return self.action != TradingAction.HOLD and self.confidence > 0.5
    
    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "symbol": "AAPL",
                "action": "BUY",
                "confidence": 0.85,
                "position_size": 0.1,
                "target_price": 155.0,
                "stop_loss": 145.0,
                "timestamp": "2023-12-01T15:30:00",
                "model_version": "cnn-lstm-v1.2.3"
            }
        }
    )